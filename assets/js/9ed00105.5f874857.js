(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var i=n(3),o=n(8),a=(n(0),n(103)),s={title:"Configuration"},r={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"Frictionless Repository can work without any additional configuration. It will just validate all the CSV and EXCEL files it can find in your repository (respecting .gitignore file).",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/docs/configuration",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/docs/configuration.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1621671784,formattedLastUpdatedAt:"5/22/2021",sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Workflow",permalink:"/docs/workflow"}},l=[{value:"Inqiury Parameter",id:"inqiury-parameter",children:[]},{value:"Configuration File",id:"configuration-file",children:[]},{value:"Best Practices",id:"best-practices",children:[{value:"Single Workflow",id:"single-workflow",children:[]},{value:"Multiple Workflows",id:"multiple-workflows",children:[]},{value:"Complex Workflows",id:"complex-workflows",children:[]}]}],c={toc:l};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Frictionless Repository can work without any additional configuration. It will just validate all the CSV and EXCEL files it can find in your repository (respecting ",Object(a.b)("inlineCode",{parentName:"p"},".gitignore")," file)."),Object(a.b)("h2",{id:"inqiury-parameter"},"Inqiury Parameter"),Object(a.b)("p",null,"Frictionless Repository step as a part of Github Workflow acceps only one paramenter called ",Object(a.b)("inlineCode",{parentName:"p"},"inquiry"),". Here is an example:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/workflows/(name).yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"- name: Validate data\n  uses: frictionlessdata/repository@v0.8.0\n  with:\n    inquiry: extra\n")),Object(a.b)("p",null,"By default, the ",Object(a.b)("inlineCode",{parentName:"p"},"inqiury")," paramenter is set to ",Object(a.b)("inlineCode",{parentName:"p"},"main"),"."),Object(a.b)("h2",{id:"configuration-file"},"Configuration File"),Object(a.b)("p",null,"You can add a ",Object(a.b)("inlineCode",{parentName:"p"},".github/frictionless.yaml")," file to your Github repository to provide an additional configuration. This file is a mapping in a form of ",Object(a.b)("inlineCode",{parentName:"p"},"inquiry name: inqiury descriptor"),". It's easier to understan using an example:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/frictionless.yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"extra:\n  tasks:\n    - path: data/valid.csv\n    - path: data/invalid.csv\n")),Object(a.b)("p",null,"The inquiry descriptor is a Frictionless Framework's ",Object(a.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/framework/inquiry-guide"},"Inquiry")," so you can use whather is possible to use for the Frictionless Framework validation. Here is a more complex example:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("a",{parentName:"p",href:"https://github.com/roll/flat-demo-bitcoin-price/blob/main/.github/frictionless.yaml"},"https://github.com/roll/flat-demo-bitcoin-price/blob/main/.github/frictionless.yaml"))),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"main:\n  tasks:\n    - path: btc-price-postprocessed.json\n      schema:\n        fields:\n          - name: currency\n            type: string\n          - name: bitcoinRate\n            type: number\n            groupChar: ','\n            constraints:\n              maximum: 40000\n")),Object(a.b)("h2",{id:"best-practices"},"Best Practices"),Object(a.b)("p",null,"You can use Frictionless in many ways and this limit is only our imagination. Thanks to composability of Github Actions, it's possible to integrate Frictionless with many other steps and implement complex validation strategies. On the other hand, if you are new to Github Actions we recommend to start from these setups:"),Object(a.b)("h3",{id:"single-workflow"},"Single Workflow"),Object(a.b)("p",null,"The simplest way to use Frictionless Repository is to create a single workflow called ",Object(a.b)("inlineCode",{parentName:"p"},"frictionless"),". This workflow will be responsible of all your data validation and you can have one status badge for the whole project:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/workflows/frictionless.yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"name: frictionless\n\n# ...\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Validate data\n        uses: frictionlessdata/repository@v0.8.0 # update to the latest version\n")),Object(a.b)("p",null,'Using this setup you will have a single "Frictionless" badge that you can add to your README.md file.'),Object(a.b)("h3",{id:"multiple-workflows"},"Multiple Workflows"),Object(a.b)("p",null,"You have a few groups of independent data or interested in more sophisticated logic you might use multiple workflows. For example, consider we have some data related to humans and some to animals:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/workflows/people.yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"name: people\n\n# ...\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Validate data\n        uses: frictionlessdata/repository@v0.8.0 # update to the latest version\n        with:\n            inquiry: people\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/workflows/animals.yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"name: animals\n\n# ...\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Validate data\n        uses: frictionlessdata/repository@v0.8.0 # update to the latest version\n        with:\n            inquiry: animals\n")),Object(a.b)("p",null,"The only missing part in this case is the ",Object(a.b)("a",{parentName:"p",href:"#configuration-file"},"Configuration File")," that will tell Frictionless what are these inquiries:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},".github/frictionless.yaml")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"people:\n  tasks:\n    - source: people/*.csv\n\nanimals:\n  tasks:\n    - source: animals/*.csv\n")),Object(a.b)("p",null,"Don't forget that we use Frictionless Framework's ",Object(a.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/guides/framework/inquiry-guide"},"Inquiry")," that gives us even more flexibility. For example, you can write quite complex tasks logis and combine it with your single or multiple workflows."),Object(a.b)("h3",{id:"complex-workflows"},"Complex Workflows"),Object(a.b)("p",null,"On top of dedicated validation workflows, you can integrate Frictionless Repository inside existent workflows. For example, here is a Frictionless-Flat Data integration:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("a",{parentName:"p",href:"https://github.com/roll/flat-demo-bitcoin-price/blob/main/.github/workflows/flat.yaml"},"https://github.com/roll/flat-demo-bitcoin-price/blob/main/.github/workflows/flat.yaml"))),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"name: Flat\n\n# ...\n\njobs:\n  scheduled:\n    runs-on: ubuntu-latest\n    steps: # This workflow has 3 steps\n      # The first step is to check out the repository so it can read the files inside of it and do other operations\n      - name: Check out repo\n        uses: actions/checkout@v2\n      # This step installs Deno, which is a new Javascript runtime that improves on Node. We'll use it for postprocessing later\n      - name: Setup deno\n        uses: denoland/setup-deno@main\n        with:\n          deno-version: v1.x\n      # The third step is a Flat Action step. We fetch the data in the http_url and save it as downloaded_filename\n      - name: Fetch data\n        uses: githubocto/flat@v2\n        with:\n          http_url: https://api.coindesk.com/v2/bpi/currentprice.json # The data to fetch every 5 minutes\n          downloaded_filename: btc-price.json # The http_url gets saved and renamed in our repository as btc-price.json\n          postprocess: postprocess.js # A postprocessing javascript or typescript file written in Deno\n      # The fourth step is validation using Frictionless Repository\n      - name: Frictionless Repository\n        uses: frictionlessdata/repository@v0.8.0\n")))}u.isMDXComponent=!0}}]);